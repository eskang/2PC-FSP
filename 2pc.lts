// Number of users
const UserNode = 2
range UserNodeID = 1 .. UserNode

// Status of users in server site 
const UserUnSent = 0
const UserUnRecv = 1
const UserRecvYes = 2
const UserRecvNo = 3
range UserStatus = UserUnSent .. UserRecvNo

const Abort = 0
const Commit = 1
range DecisionResults = Abort .. Commit

//=============================
// SERVER PROCESS (COORDINATOR)
//=============================

// Server local process
// Starting by creating a new commit request
SERVER = SERVER_WORKING,
SERVER_WORKING = (
    server_create_commit -> GATHER_RESPONSE[UserUnSent][UserUnSent]
),

// Server local process with two params: a and b
// Both a and b are represented for user nodes
// This local process tracks message status sent to user nodes
GATHER_RESPONSE[a:UserStatus][b:UserStatus] = (
    // If not sent commit message to user a
    // Send commit message to user a
    when(a == UserUnSent)
        server_sent_commit_to_a -> GATHER_RESPONSE[UserUnRecv][b]
    |
    // If not sent commit message to user b
    // Send commit message to user b
    when(b == UserUnSent)
        server_sent_commit_to_b -> GATHER_RESPONSE[a][UserUnRecv]
    |
    // Wait for user a sent voting message to the server
    when(a == UserUnRecv)
            server_recv_voting_yes_from_a -> GATHER_RESPONSE[UserRecvYes][b]
        |
        when(a == UserUnRecv)
            server_recv_voting_no_from_a -> GATHER_RESPONSE[UserRecvNo][b]
        |
        when(a == UserUnRecv)
            server_commit_message_a_timeout -> GATHER_RESPONSE[UserRecvNo][b]
    |
    // Wait for user b sent voting message to the server
    when(b == UserUnRecv)
            server_recv_voting_yes_from_b -> GATHER_RESPONSE[a][UserRecvYes]
        |
        when(b == UserUnRecv)
            server_recv_voting_no_from_b -> GATHER_RESPONSE[a][UserRecvNo]
        |
        when(b == UserUnRecv)
            server_commit_message_b_timeout -> GATHER_RESPONSE[a][UserRecvNo]
    |
    // If both voting messages are received
    // Jump to the process that makes the final decision
    when((a == UserRecvYes || a == UserRecvNo) && (b == UserRecvYes || b == UserRecvNo))
        server_make_decision -> DECISION_PROCESS[a][b]
    
),

// A local process that makes the final decision
DECISION_PROCESS[a:UserStatus][b:UserStatus] = (
    when(a == UserRecvNo)
        server_abort -> SEND_RESULTS[Abort][UserUnSent][UserUnSent]
    |
    when(b == UserRecvNo)
        server_abort -> SEND_RESULTS[Abort][UserUnSent][UserUnSent]
    |
    when(a == UserRecvYes && b == UserRecvYes)
        server_commit -> SEND_RESULTS[Commit][UserUnSent][UserUnSent]
),

SEND_RESULTS[s:DecisionResults][a:UserStatus][b:UserStatus] = (
    when(a == UserUnSent && s == Commit) 
        server_send_commit_to_a -> SEND_RESULTS[s][UserUnRecv][b]
    |
    when(a == UserUnSent && s == Abort)
        server_send_abort_to_a -> SEND_RESULTS[s][UserUnRecv][b]
    |
    when(b == UserUnSent && s == Commit) 
        server_send_commit_to_b -> SEND_RESULTS[s][a][UserUnRecv]
    |
    when(b == UserUnSent && s == Abort)
        server_send_abort_to_b -> SEND_RESULTS[s][a][UserUnRecv]
    |
    when(a == UserUnRecv)
        server_recv_ack_from_a -> SEND_RESULTS[s][UserRecvYes][b]
        |
        server_decision_result_a_timeout -> SEND_RESULTS[s][UserUnSent][b]
    |
    when(b == UserUnRecv)
        server_recv_ack_from_b -> SEND_RESULTS[s][a][UserRecvYes]
        |
        server_decision_result_b_timeout -> SEND_RESULTS[s][a][UserUnSent]
    |
    when(a == UserRecvYes && b == UserRecvYes)
        server_back_to_init_state -> SERVER

).

//=============================
// NETWORK PROCESS 
//=============================

// Packet status in network process 
const PktEmpty = 0
const PktFromServer = 1
const PktFromUser = 2
const PktFromUserYes = 3
const PktFromUserNo = 4
const PktLostCommit = 5
const PktLostDecision = 6
const DecisionYesFromServer = 7
const DecisionNoFromServer = 8
const AckFromUser = 9
range PktStatus = PktEmpty .. AckFromUser

// A local process in network
// Handle with concurrent message delivery 
NETWORK = NETWORK_WORKING[PktEmpty][PktEmpty],
NETWORK_WORKING[a:PktStatus][b:PktStatus] = (
    when(a == PktLostCommit) 
        server_commit_message_a_timeout -> NETWORK_WORKING[PktEmpty][b]
    |
    when(a == PktLostDecision)
        server_decision_result_a_timeout -> NETWORK_WORKING[PktEmpty][b]
    |
    when(b == PktLostCommit)
        server_commit_message_b_timeout -> NETWORK_WORKING[a][PktEmpty]
    |
    when(b == PktLostDecision)
        server_decision_result_b_timeout -> NETWORK_WORKING[a][PktEmpty]
    |
    // When neither server nor user a send message to each other
    when(a == PktEmpty)
        // Server send commit message to user a
        get_commit_message_a -> NETWORK_WORKING[PktFromServer][b]
        |
        get_commit_message_a -> NETWORK_WORKING[PktLostCommit][b]
        |
    when(a == PktEmpty)
        // User a send voting message to server
        get_voting_message_yes_a -> NETWORK_WORKING[PktFromUserYes][b]
        |
        get_voting_message_yes_a -> NETWORK_WORKING[PktLostCommit][b]
        |
    when(a == PktEmpty)
        get_voting_message_no_a -> NETWORK_WORKING[PktFromUserNo][b]
        |
        get_voting_message_no_a -> NETWORK_WORKING[PktLostCommit][b]
        |
    when(a == PktEmpty)
        get_decision_result_yes_a -> NETWORK_WORKING[DecisionYesFromServer][b]
        |
        get_decision_result_yes_a -> NETWORK_WORKING[PktLostDecision][b]
    |
    when(a == PktEmpty)
        get_decision_result_no_a -> NETWORK_WORKING[DecisionNoFromServer][b]
        |
        get_decision_result_no_a -> NETWORK_WORKING[PktLostDecision][b]
    |
    when(a == PktEmpty)
        get_ack_message_a ->NETWORK_WORKING[AckFromUser][b]
        |
        get_ack_message_a -> NETWORK_WORKING[PktLostDecision][b]
    |
    // When neither server nor user b send message to each other
    when(b == PktEmpty)
    // Server send commit message to user b
        get_commit_message_b -> NETWORK_WORKING[a][PktFromServer]
        |
        get_commit_message_b -> NETWORK_WORKING[a][PktLostCommit]
    |
    when(b == PktEmpty)
    // User b send voting message to server
        get_voting_message_yes_b -> NETWORK_WORKING[a][PktFromUserYes]
        |
        get_voting_message_yes_b -> NETWORK_WORKING[a][PktLostCommit]
    |
    when(b == PktEmpty)
        get_voting_message_no_b -> NETWORK_WORKING[a][PktFromUserNo]
        |
        get_voting_message_no_b -> NETWORK_WORKING[a][PktLostCommit]
    |
    when(b == PktEmpty)
        get_decision_result_yes_b -> NETWORK_WORKING[a][DecisionYesFromServer]
        |
        get_decision_result_yes_b -> NETWORK_WORKING[a][PktLostDecision]
    |
    when(b == PktEmpty)
        get_decision_result_no_b -> NETWORK_WORKING[a][DecisionNoFromServer]
        |
        get_decision_result_no_b -> NETWORK_WORKING[a][PktLostDecision]
    |
    when(b == PktEmpty)
        get_ack_message_b -> NETWORK_WORKING[a][AckFromUser]
        |
        get_ack_message_b -> NETWORK_WORKING[a][PktLostDecision]
    |
    // When server send a commit message to user a
    when(a == PktFromServer)
        put_commit_message_a -> NETWORK_WORKING[PktEmpty][b]
    |
    // When server send a commit message to user b
    when(b == PktFromServer)
        put_commit_message_b -> NETWORK_WORKING[a][PktEmpty]
    |
    // When user a send voting message to server
    when(a == PktFromUserYes)
        put_voting_message_yes_a -> NETWORK_WORKING[PktEmpty][b]
    |
    when(a == PktFromUserNo)
        put_voting_message_no_a -> NETWORK_WORKING[PktEmpty][b]
    |
    // When user b send voting message to server
    when(b == PktFromUserYes)
        put_voting_message_yes_b -> NETWORK_WORKING[a][PktEmpty]
    |
    when(b == PktFromUserNo)
        put_voting_message_no_b -> NETWORK_WORKING[a][PktEmpty]
    |
    when(a == DecisionYesFromServer)
        put_decision_result_yes_a -> NETWORK_WORKING[PktEmpty][b]
    |
    when(a == DecisionNoFromServer)
        put_decision_result_no_a -> NETWORK_WORKING[PktEmpty][b]
    |
    when(b == DecisionYesFromServer)
        put_decision_result_yes_b -> NETWORK_WORKING[a][PktEmpty]
    |
    when(b == DecisionNoFromServer)
        put_decision_result_no_b -> NETWORK_WORKING[a][PktEmpty]
    |
    when(a == AckFromUser)
        put_ack_message_a -> NETWORK_WORKING[PktEmpty][b]
    |
    when(b == AckFromUser)
        put_ack_message_b -> NETWORK_WORKING[a][PktEmpty]

).

//=============================
// USER PROCESS
//=============================

// User A process 
USER_A = (
    // Receive commit message from server
    // Response by voting message
    user_a_recv_commit -> (user_a_decide_yes -> user_a_send_yes_message -> USER_A
    |
    user_a_decide_no -> user_a_send_no_message -> USER_A)
    |
    user_a_recv_decision_commit -> user_a_send_ack -> USER_A
    |
    user_a_recv_decision_abort -> user_a_send_ack -> USER_A
    ).

USER_B = (
    // Receive commit message from server
    // Response by voting message
    user_b_recv_commit -> (user_b_decide_yes -> user_b_send_yes_message -> USER_B
    |
    user_b_decide_no -> user_b_send_no_message -> USER_B)
    |
    user_b_recv_decision_commit -> user_b_send_ack -> USER_B
    |
    user_b_recv_decision_abort -> user_b_send_ack -> USER_B
    ).

||TPC = (SERVER||NETWORK||USER_A||USER_B)
/
{server_sent_commit_to_a/get_commit_message_a, 
server_sent_commit_to_b/get_commit_message_b, 
server_recv_voting_yes_from_a/put_voting_message_yes_a, 
server_recv_voting_no_from_a/put_voting_message_no_a, 
server_recv_voting_yes_from_b/put_voting_message_yes_b, 
server_recv_voting_no_from_b/put_voting_message_no_b, 
user_a_recv_commit/put_commit_message_a, 
user_b_recv_commit/put_commit_message_b, 
user_a_send_yes_message/get_voting_message_yes_a, 
user_a_send_no_message/get_voting_message_no_a, 
user_b_send_yes_message/get_voting_message_yes_b,
user_b_send_no_message/get_voting_message_no_b,
server_send_commit_to_a/get_decision_result_yes_a,
server_send_abort_to_a/get_decision_result_no_a,
server_send_commit_to_b/get_decision_result_yes_b,
server_send_abort_to_b/get_decision_result_no_b,
user_a_recv_decision_commit/put_decision_result_yes_a,
user_a_recv_decision_abort/put_decision_result_no_a,
user_b_recv_decision_commit/put_decision_result_yes_b,
user_b_recv_decision_abort/put_decision_result_no_b,
user_a_send_ack/get_ack_message_a,
user_b_send_ack/get_ack_message_b,
server_recv_ack_from_a/put_ack_message_a,
server_recv_ack_from_b/put_ack_message_b
}.
