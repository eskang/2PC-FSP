// Two-Phase Commit analysis with FSP

// ################################################################################
// #                                2pc.lts                                       #
// # Author: Huairui Qi, <huairuiq@andrew.cmu.edu>                                #
// ################################################################################


// Number of users
const UserNode = 2
range UserNodeID = 1 .. UserNode

// Status of users in server site 
const UserUnSent = 0
const UserUnRecv = 1
const UserRecvYes = 2
const UserRecvNo = 3
range UserStatus = UserUnSent .. UserRecvNo

// Status of decisions
const Abort = 0
const Commit = 1
range DecisionResults = Abort .. Commit

//=============================
// SERVER PROCESS (COORDINATOR)
//=============================

// Server local process
// Starting by creating a new commit request
SERVER = SERVER_WORKING,
SERVER_WORKING = (
    server_create_commit -> GATHER_RESPONSE[UserUnSent][UserUnSent]
),

// Server local process with two params: a and b
// Both a and b are represented for user nodes
// This local process tracks message status sent to user nodes
GATHER_RESPONSE[a:UserStatus][b:UserStatus] = (
    // If not sent commit message to user a
    // Send commit message to user a
    when(a == UserUnSent)
        server_sent_commit_to_a -> GATHER_RESPONSE[UserUnRecv][b]
    |
    // If not sent commit message to user b
    // Send commit message to user b
    when(b == UserUnSent)
        server_sent_commit_to_b -> GATHER_RESPONSE[a][UserUnRecv]
    |
    // Wait for user a sent voting message to the server
    when(a == UserUnRecv)
            server_recv_voting_yes_from_a -> GATHER_RESPONSE[UserRecvYes][b]
        |
        when(a == UserUnRecv)
            server_recv_voting_no_from_a -> GATHER_RESPONSE[UserRecvNo][b]
        |
        // Commit message might lost or timeout
        // Server will abort once timeout happened 
        when(a == UserUnRecv)
            server_commit_message_a_timeout -> GATHER_RESPONSE[UserRecvNo][b]
    |
    // Wait for user b sent voting message to the server
    when(b == UserUnRecv)
            server_recv_voting_yes_from_b -> GATHER_RESPONSE[a][UserRecvYes]
        |
        when(b == UserUnRecv)
            server_recv_voting_no_from_b -> GATHER_RESPONSE[a][UserRecvNo]
        |
        // Commit message might lost or timeout
        // Server will abort once timeout happened 
        when(b == UserUnRecv)
            server_commit_message_b_timeout -> GATHER_RESPONSE[a][UserRecvNo]
    |
    // If both voting messages are received
    // Jump to the process that makes the final decision
    when((a == UserRecvYes || a == UserRecvNo) && (b == UserRecvYes || b == UserRecvNo))
        server_make_decision -> DECISION_PROCESS[a][b]
    
),

// A local process that makes the final decision
DECISION_PROCESS[a:UserStatus][b:UserStatus] = (
    // If user a's voting message is no or timeout
    // Decision is abort
    when(a == UserRecvNo)
        server_abort -> SEND_RESULTS[Abort][UserUnSent][UserUnSent]
    |
    // If user b's voting message is no or timeout
    // Decision is abort
    when(b == UserRecvNo)
        server_abort -> SEND_RESULTS[Abort][UserUnSent][UserUnSent]
    |
    // If both a and b's voting message is yes
    // Decision is commit
    when(a == UserRecvYes && b == UserRecvYes)
        server_commit -> SEND_RESULTS[Commit][UserUnSent][UserUnSent]
),

// A local process to send decision results to users and wait for user's ack
SEND_RESULTS[s:DecisionResults][a:UserStatus][b:UserStatus] = (
    // If decision result is commit
    // Send it to user a
    when(a == UserUnSent && s == Commit) 
        server_send_commit_to_a -> SEND_RESULTS[s][UserUnRecv][b]
    |
    // If decision result is abort
    // Send it to user a
    when(a == UserUnSent && s == Abort)
        server_send_abort_to_a -> SEND_RESULTS[s][UserUnRecv][b]
    |
    // If decision result is commit
    // Send it to user b
    when(b == UserUnSent && s == Commit) 
        server_send_commit_to_b -> SEND_RESULTS[s][a][UserUnRecv]
    |
    // If decision result is abort
    // Send it to user b
    when(b == UserUnSent && s == Abort)
        server_send_abort_to_b -> SEND_RESULTS[s][a][UserUnRecv]
    |
    // Wait for user a's ack
    // Or resend the result when timeout happened
    when(a == UserUnRecv)
        server_recv_ack_from_a -> SEND_RESULTS[s][UserRecvYes][b]
        |
        server_decision_result_a_timeout -> SEND_RESULTS[s][UserUnSent][b]
    |
    // Wait for user b's ack
    // Or resend the result when timeout happened
    when(b == UserUnRecv)
        server_recv_ack_from_b -> SEND_RESULTS[s][a][UserRecvYes]
        |
        server_decision_result_b_timeout -> SEND_RESULTS[s][a][UserUnSent]
    |
    // If receive both a and b's ack
    // Go to next commit
    when(a == UserRecvYes && b == UserRecvYes)
        server_back_to_init_state -> SERVER

).

//=============================
// NETWORK PROCESS 
//=============================

// Packet status in network process 
const PktEmpty = 0
const PktFromServer = 1
const PktFromUser = 2
const PktFromUserYes = 3
const PktFromUserNo = 4
const PktLostCommit = 5
const PktLostDecision = 6
const DecisionYesFromServer = 7
const DecisionNoFromServer = 8
const AckFromUser = 9
range PktStatus = PktEmpty .. AckFromUser

// A local process in network
// Handle with concurrent message delivery 
// This network is a reliable network without any packet loss
RELIABLE_NETWORK = RELIABLE_NETWORK_WORKING[PktEmpty][PktEmpty],
RELIABLE_NETWORK_WORKING[a:PktStatus][b:PktStatus] = (
    // When neither server nor user a send message to each other
    when(a == PktEmpty)
        // Server send commit message to user a
            get_commit_message_a -> RELIABLE_NETWORK_WORKING[PktFromServer][b]
        |
        when(a == PktEmpty)
        // User a send voting message "yes" to server
            get_voting_message_yes_a -> RELIABLE_NETWORK_WORKING[PktFromUserYes][b]
        |
        // User a send voting message "no" to server
        when(a == PktEmpty)
            get_voting_message_no_a -> RELIABLE_NETWORK_WORKING[PktFromUserNo][b]
        |
        // Server send decision commit to user a
        when(a == PktEmpty)
            get_decision_result_yes_a -> RELIABLE_NETWORK_WORKING[DecisionYesFromServer][b]
        |
        // Server send decision abort to user a
        when(a == PktEmpty)
            get_decision_result_no_a -> RELIABLE_NETWORK_WORKING[DecisionNoFromServer][b]
        |
        // User a send ack message to server
        when(a == PktEmpty)
            get_ack_message_a ->RELIABLE_NETWORK_WORKING[AckFromUser][b]
    |
    // When neither server nor user b send message to each other
    when(b == PktEmpty)
        // Server send commit message to user b
            get_commit_message_b -> RELIABLE_NETWORK_WORKING[a][PktFromServer]
        |
        when(b == PktEmpty)
        // User b send voting message "yes" to server
            get_voting_message_yes_b -> RELIABLE_NETWORK_WORKING[a][PktFromUserYes]
        |
        // User b send voting message "no" to server
        when(b == PktEmpty)
            get_voting_message_no_b -> RELIABLE_NETWORK_WORKING[a][PktFromUserNo]
        |
        // Server send decision commit to user b
        when(b == PktEmpty)
            get_decision_result_yes_b -> RELIABLE_NETWORK_WORKING[a][DecisionYesFromServer]
        |
        // Server send decision abort to user b
        when(b == PktEmpty)
            get_decision_result_no_b -> RELIABLE_NETWORK_WORKING[a][DecisionNoFromServer]
        |
        // User b send ack message to server
        when(b == PktEmpty)
            get_ack_message_b -> RELIABLE_NETWORK_WORKING[a][AckFromUser]
    |
    // When server send a commit message to user a
    when(a == PktFromServer)
        put_commit_message_a -> RELIABLE_NETWORK_WORKING[PktEmpty][b]
    |
    // When server send a commit message to user b
    when(b == PktFromServer)
        put_commit_message_b -> RELIABLE_NETWORK_WORKING[a][PktEmpty]
    |
    // When user a send voting message "yes" to server
    when(a == PktFromUserYes)
        put_voting_message_yes_a -> RELIABLE_NETWORK_WORKING[PktEmpty][b]
    |
    // When user a send voting message "no" to server
    when(a == PktFromUserNo)
        put_voting_message_no_a -> RELIABLE_NETWORK_WORKING[PktEmpty][b]
    |
    // When user b send voting message "yes" to server
    when(b == PktFromUserYes)
        put_voting_message_yes_b -> RELIABLE_NETWORK_WORKING[a][PktEmpty]
    |
    // When user b send voting message "no" to server
    when(b == PktFromUserNo)
        put_voting_message_no_b -> RELIABLE_NETWORK_WORKING[a][PktEmpty]
    |
    // When server send commit decision to user a
    when(a == DecisionYesFromServer)
        put_decision_result_yes_a -> RELIABLE_NETWORK_WORKING[PktEmpty][b]
    |
    // When server send abort decision to user a
    when(a == DecisionNoFromServer)
        put_decision_result_no_a -> RELIABLE_NETWORK_WORKING[PktEmpty][b]
    |
    // When server send commit decision to user b
    when(b == DecisionYesFromServer)
        put_decision_result_yes_b -> RELIABLE_NETWORK_WORKING[a][PktEmpty]
    |
    // When server send abort decision to user b
    when(b == DecisionNoFromServer)
        put_decision_result_no_b -> RELIABLE_NETWORK_WORKING[a][PktEmpty]
    |
    // When user a send ack to server
    when(a == AckFromUser)
        put_ack_message_a -> RELIABLE_NETWORK_WORKING[PktEmpty][b]
    |
    // When user b send ack to server
    when(b == AckFromUser)
        put_ack_message_b -> RELIABLE_NETWORK_WORKING[a][PktEmpty]

).

// A local process in network
// Handle with concurrent message delivery 
// This network is unreliable with packets loss
UNRELIABLE_NETWORK = UNRELIABLE_NETWORK_WORKING[PktEmpty][PktEmpty],
UNRELIABLE_NETWORK_WORKING[a:PktStatus][b:PktStatus] = (
    // When user a lost commit message
    // Commit message will timeout
    when(a == PktLostCommit) 
        server_commit_message_a_timeout -> UNRELIABLE_NETWORK_WORKING[PktEmpty][b]
    |
    // When user a lost decision message
    // Decision message will timeout
    when(a == PktLostDecision)
        server_decision_result_a_timeout -> UNRELIABLE_NETWORK_WORKING[PktEmpty][b]
    |
    // When user b lost commit message
    // Commit message will timeout
    when(b == PktLostCommit)
        server_commit_message_b_timeout -> UNRELIABLE_NETWORK_WORKING[a][PktEmpty]
    |
    // When user b lost decision message
    // Decision message will timeout
    when(b == PktLostDecision)
        server_decision_result_b_timeout -> UNRELIABLE_NETWORK_WORKING[a][PktEmpty]
    |
    // When neither server nor user a send message to each other
    when(a == PktEmpty)
        // Server send commit message to user a
        get_commit_message_a -> UNRELIABLE_NETWORK_WORKING[PktFromServer][b]
        |
        // Message sent by server lost
        get_commit_message_a -> UNRELIABLE_NETWORK_WORKING[PktLostCommit][b]
        |
    when(a == PktEmpty)
        // User a send voting message "yes" to server
        get_voting_message_yes_a -> UNRELIABLE_NETWORK_WORKING[PktFromUserYes][b]
        |
        // Voting message lost 
        get_voting_message_yes_a -> UNRELIABLE_NETWORK_WORKING[PktLostCommit][b]
        |
        // User a send voting message "no" to server
    when(a == PktEmpty)
        // User a send voting message "no" to server
        get_voting_message_no_a -> UNRELIABLE_NETWORK_WORKING[PktFromUserNo][b]
        |
        // Voting message lost 
        get_voting_message_no_a -> UNRELIABLE_NETWORK_WORKING[PktLostCommit][b]
        |
    when(a == PktEmpty)
        // Server send decision commit to user a
        get_decision_result_yes_a -> UNRELIABLE_NETWORK_WORKING[DecisionYesFromServer][b]
        |
        // Commit lost
        get_decision_result_yes_a -> UNRELIABLE_NETWORK_WORKING[PktLostDecision][b]
    |
    when(a == PktEmpty)
        // Server send decision abort to user a
        get_decision_result_no_a -> UNRELIABLE_NETWORK_WORKING[DecisionNoFromServer][b]
        |
        // Abort lost
        get_decision_result_no_a -> UNRELIABLE_NETWORK_WORKING[PktLostDecision][b]
    |
    when(a == PktEmpty)
        // User a send ack message to server
        get_ack_message_a ->UNRELIABLE_NETWORK_WORKING[AckFromUser][b]
        |
        // Ack lost
        get_ack_message_a -> UNRELIABLE_NETWORK_WORKING[PktLostDecision][b]
    |
    // When neither server nor user b send message to each other
    when(b == PktEmpty)
    // Server send commit message to user b
        get_commit_message_b -> UNRELIABLE_NETWORK_WORKING[a][PktFromServer]
        |
        // Message sent by server lost
        get_commit_message_b -> UNRELIABLE_NETWORK_WORKING[a][PktLostCommit]
    |
    when(b == PktEmpty)
        // User b send voting message "yes" to server
        get_voting_message_yes_b -> UNRELIABLE_NETWORK_WORKING[a][PktFromUserYes]
        |
        // Voting message lost
        get_voting_message_yes_b -> UNRELIABLE_NETWORK_WORKING[a][PktLostCommit]
    |
    when(b == PktEmpty)
        // User b send voting message "no" to server
        get_voting_message_no_b -> UNRELIABLE_NETWORK_WORKING[a][PktFromUserNo]
        |
        // Voting message lost
        get_voting_message_no_b -> UNRELIABLE_NETWORK_WORKING[a][PktLostCommit]
    |
    when(b == PktEmpty)
        // Server send decision commit to user b
        get_decision_result_yes_b -> UNRELIABLE_NETWORK_WORKING[a][DecisionYesFromServer]
        |
        // Commit lost 
        get_decision_result_yes_b -> UNRELIABLE_NETWORK_WORKING[a][PktLostDecision]
    |
    when(b == PktEmpty)
        // Server send decision abort to user b
        get_decision_result_no_b -> UNRELIABLE_NETWORK_WORKING[a][DecisionNoFromServer]
        |
        // Abort lost
        get_decision_result_no_b -> UNRELIABLE_NETWORK_WORKING[a][PktLostDecision]
    |
    when(b == PktEmpty)
        // User b send ack message to server
        get_ack_message_b -> UNRELIABLE_NETWORK_WORKING[a][AckFromUser]
        |
        // Ack lost
        get_ack_message_b -> UNRELIABLE_NETWORK_WORKING[a][PktLostDecision]
    |
    // When server send a commit message to user a
    when(a == PktFromServer)
        put_commit_message_a -> UNRELIABLE_NETWORK_WORKING[PktEmpty][b]
    |
    // When server send a commit message to user b
    when(b == PktFromServer)
        put_commit_message_b -> UNRELIABLE_NETWORK_WORKING[a][PktEmpty]
    |
    // When user a send voting message "yes" to server
    when(a == PktFromUserYes)
        put_voting_message_yes_a -> UNRELIABLE_NETWORK_WORKING[PktEmpty][b]
    |
    // When user a send voting message "no" to server
    when(a == PktFromUserNo)
        put_voting_message_no_a -> UNRELIABLE_NETWORK_WORKING[PktEmpty][b]
    |
    // When user b send voting message "yes" to server
    when(b == PktFromUserYes)
        put_voting_message_yes_b -> UNRELIABLE_NETWORK_WORKING[a][PktEmpty]
    |
    // When user b send voting message "no" to server
    when(b == PktFromUserNo)
        put_voting_message_no_b -> UNRELIABLE_NETWORK_WORKING[a][PktEmpty]
    |
    // When server send commit decision to user a
    when(a == DecisionYesFromServer)
        put_decision_result_yes_a -> UNRELIABLE_NETWORK_WORKING[PktEmpty][b]
    |
    // When server send abort decision to user a
    when(a == DecisionNoFromServer)
        put_decision_result_no_a -> UNRELIABLE_NETWORK_WORKING[PktEmpty][b]
    |
    // When server send commit decision to user b
    when(b == DecisionYesFromServer)
        put_decision_result_yes_b -> UNRELIABLE_NETWORK_WORKING[a][PktEmpty]
    |
    // When server send abort decision to user b
    when(b == DecisionNoFromServer)
        put_decision_result_no_b -> UNRELIABLE_NETWORK_WORKING[a][PktEmpty]
    |
    // When user a send ack to server
    when(a == AckFromUser)
        put_ack_message_a -> UNRELIABLE_NETWORK_WORKING[PktEmpty][b]
    |
    // When user b send ack to server
    when(b == AckFromUser)
        put_ack_message_b -> UNRELIABLE_NETWORK_WORKING[a][PktEmpty]

).

//=============================
// USER PROCESS
//=============================

// User A process 
USER_A = (
    // Receive commit message from server
    // Response by voting message
    user_a_recv_commit -> (user_a_decide_yes -> user_a_send_yes_message -> USER_A
    |
    user_a_decide_no -> user_a_send_no_message -> USER_A)
    |
    // Receive commit decision, send ack message to server
    user_a_recv_decision_commit -> user_a_send_ack -> USER_A
    |
    // Receive abort decision, send ack message to server
    user_a_recv_decision_abort -> user_a_send_ack -> USER_A
    ).

USER_B = (
    // Receive commit message from server
    // Response by voting message
    user_b_recv_commit -> (user_b_decide_yes -> user_b_send_yes_message -> USER_B
    |
    user_b_decide_no -> user_b_send_no_message -> USER_B)
    |
    // Receive commit decision, send ack message to server
    user_b_recv_decision_commit -> user_b_send_ack -> USER_B
    |
    // Receive abort decision, send ack message to server
    user_b_recv_decision_abort -> user_b_send_ack -> USER_B
    ).


//=============================
// TWO-PHASE COMMIT PROTOCOL
//=============================

// This two-phase commit protocol is concurrent with unreliable network. 
// The network will lose packet randomly. 
||TPC_UNRELIABLE_NETWORK = (SERVER||UNRELIABLE_NETWORK||USER_A||USER_B)
/
{server_sent_commit_to_a/get_commit_message_a, 
server_sent_commit_to_b/get_commit_message_b, 
server_recv_voting_yes_from_a/put_voting_message_yes_a, 
server_recv_voting_no_from_a/put_voting_message_no_a, 
server_recv_voting_yes_from_b/put_voting_message_yes_b, 
server_recv_voting_no_from_b/put_voting_message_no_b, 
user_a_recv_commit/put_commit_message_a, 
user_b_recv_commit/put_commit_message_b, 
user_a_send_yes_message/get_voting_message_yes_a, 
user_a_send_no_message/get_voting_message_no_a, 
user_b_send_yes_message/get_voting_message_yes_b,
user_b_send_no_message/get_voting_message_no_b,
server_send_commit_to_a/get_decision_result_yes_a,
server_send_abort_to_a/get_decision_result_no_a,
server_send_commit_to_b/get_decision_result_yes_b,
server_send_abort_to_b/get_decision_result_no_b,
user_a_recv_decision_commit/put_decision_result_yes_a,
user_a_recv_decision_abort/put_decision_result_no_a,
user_b_recv_decision_commit/put_decision_result_yes_b,
user_b_recv_decision_abort/put_decision_result_no_b,
user_a_send_ack/get_ack_message_a,
user_b_send_ack/get_ack_message_b,
server_recv_ack_from_a/put_ack_message_a,
server_recv_ack_from_b/put_ack_message_b
}.



//=============================
// Properties
//=============================

const False = 0
const True = 1

//=============================
// SERVER 
//=============================

fluent SERVER_COMMIT = <
    {
        server_commit
    }, 
    {
        server_abort,
        server_create_commit
    }> 
    initially False

fluent SERVER_ABORT = <
    {
        server_abort
    }, 
    {
        server_commit,
        server_create_commit
    }> 
    initially False

fluent SERVER_COMMIT_FINISH = < 
    {
        server_back_to_init_state
    },
    {
        server_create_commit
    }>
    initially False

//=============================
// NETWORK
//=============================

fluent PACKET_LOST_PHASE_ONE = <
    {
        server_commit_message_a_timeout, 
        server_commit_message_b_timeout
    }, 
    {   
        server_commit, 
        server_create_commit
    }> 
    initially False

fluent PACKET_LOST_PHASE_TWO = <
    {
        server_decision_result_a_timeout,
        server_decision_result_b_timeout 
    },
    {
        server_create_commit
    }>
    initially False


//=============================
// USER_A
//=============================

fluent USER_A_VOTING_YES = <
    {
        user_a_decide_yes
    },
    {
        user_a_decide_no,
        server_create_commit
    }> 
    initially False

fluent USER_A_VOTING_NO = <
    {
        user_a_decide_no
    },
    {
        user_a_decide_yes,
        server_create_commit
    }> 
    initially False

fluent USER_A_RESPONSE = <
    {
        server_recv_voting_yes_from_a,
        server_recv_voting_no_from_a,
        server_commit_message_a_timeout
    },
    {
        server_create_commit
    }>
    initially False

fluent USER_A_ACK = <
    {
        server_recv_ack_from_a
    },
    {
        server_decision_result_a_timeout,
        server_create_commit
    }>
    initially False

fluent USER_A_RECEIVE_DECISION_COMMIT = <
    {
        user_a_recv_decision_commit
    },
    {
        user_a_recv_decision_abort,
        server_create_commit
    }>
    initially False

fluent USER_A_RECEIVE_DECISION_ABORT = <
    {
        user_a_recv_decision_abort
    },
    {
        user_a_recv_decision_commit,
        server_create_commit
    }>
    initially False

//=============================
// USER_B
//=============================

fluent USER_B_VOTING_YES = <
    {
        user_b_decide_yes
    },
    {
        user_b_decide_no,
        server_create_commit
    }> 
    initially False

fluent USER_B_VOTING_NO = <
    {
        user_b_decide_no
    },
    {
        user_b_decide_yes,
        server_create_commit
    }> 
    initially False

fluent USER_B_RESPONSE = <
    {
        server_recv_voting_yes_from_b,
        server_recv_voting_no_from_b,
        server_commit_message_b_timeout
    },
    {
        server_create_commit
    }>
    initially False

fluent USER_B_ACK = <
    {
        server_recv_ack_from_b
    },
    {
        server_decision_result_b_timeout,
        server_create_commit
    }>
    initially False

fluent USER_B_RECEIVE_DECISION_COMMIT = <
    {
        user_b_recv_decision_commit
    },
    {
        user_b_recv_decision_abort,
        server_create_commit
    }>
    initially False

fluent USER_B_RECEIVE_DECISION_ABORT = <
    {
        user_b_recv_decision_abort
    },
    {
        user_b_recv_decision_commit,
        server_create_commit
    }>
    initially False

//=============================
// Safety
//=============================

// 0. The system will never deadlock.
// This can be easily checked by LTSA tool.

// 1. If all the users voting "Yes" on this commit without packet loss in PHASE 1, 
// the server will never return "abort" decision result.
assert SERVER_NEVER_ABORT = [](
    (USER_A_VOTING_YES && USER_B_VOTING_YES && !PACKET_LOST_PHASE_ONE)
    -> !SERVER_ABORT)

// 2. If at least one user voting "No" on this commit, 
// the server will never return "commit" decision result.
assert SERVER_NEVER_COMMIT = [](
    (USER_A_VOTING_NO || USER_B_VOTING_NO) 
    -> !SERVER_COMMIT)

// 3. If the server does not get response (include "timeout") from any one of the users,
// the server will never make decision result.
assert SERVER_NEVER_MAKE_DECISION = [](
    (!USER_A_RESPONSE || !USER_B_RESPONSE) 
    -> !(SERVER_COMMIT || SERVER_ABORT)
    )

// 4. If the server does not get all the "ACKs" from users, 
// this commit process will never finish.
assert SERVER_NEVER_FINISH_COMMIT = [](
    !(USER_A_ACK && USER_B_ACK) -> !SERVER_COMMIT_FINISH
    )

// 5. If the server make the decision as "commit", 
// all of the users will never received the decision "abort".

assert USER_NEVER_RECEIVE_ABORT = [](
    SERVER_COMMIT 
    -> !(USER_A_RECEIVE_DECISION_ABORT || USER_B_RECEIVE_DECISION_ABORT)
    )

// 6. If the server make the decision as "abort", 
// all of the users will never received the decision "commit".

assert USER_NEVER_RECEIVE_COMMIT = [](
    SERVER_ABORT 
    -> !(USER_A_RECEIVE_DECISION_COMMIT || USER_B_RECEIVE_DECISION_COMMIT)
    )

// 7. If any packet loss happens in PHASE 1 (prepare commit), 
// the decision result will never be "commit".

assert DECISION_NEVER_COMMIT_WHEN_TIMEOUT_PHASE_ONE = [](
    PACKET_LOST_PHASE_ONE -> !SERVER_COMMIT
    )

//=============================
// Liveness 
//=============================

// 1. If all the users voting "Yes" on this commit without packet loss in PHASE 1, 
// the server will eventually return "commit" decision result.
assert SERVER_EVENTUALLY_COMMIT = (
    (USER_A_VOTING_YES && USER_B_VOTING_YES && !PACKET_LOST_PHASE_ONE)
    -> <>SERVER_COMMIT)

// 2. If at least one user voting "No" on this commit, 
// the server will eventually return "abort" decision result.
assert SERVER_EVENTUALLY_ABORT = (
    (USER_A_VOTING_NO || USER_B_VOTING_NO)
    -> <>SERVER_ABORT)
 
// 3. If the server has already get all the response (include "timeout") from all of the users, 
// the server will eventually make decision result.

assert SERVER_EVENTUALLY_RESPONSE = (
    (USER_A_RESPONSE && USER_B_RESPONSE) 
    -> <>(SERVER_COMMIT || SERVER_ABORT)
    ) 

// 4. If the server has already get all the "ACKs" from users, this 
// commit process will eventually finish.

assert SERVER_EVENTUALLY_FINISH_COMMIT = (
    (USER_A_ACK && USER_B_ACK) -> <>SERVER_COMMIT_FINISH
    )

// 5. If the server make the decision as "commit", 
// all of the users will eventually received the same decision "commit".

assert USER_EVENTUALLY_RECEIVE_COMMIT = (
    SERVER_COMMIT 
    -> <>(USER_A_RECEIVE_DECISION_COMMIT && USER_B_RECEIVE_DECISION_COMMIT)
    )

// 6. If the server make the decision as "abort", all of the users will 
// eventually received the same decision "abort".

assert USER_EVENTUALLY_RECEIVE_ABORT = (
    SERVER_ABORT
    -> <>(USER_A_RECEIVE_DECISION_ABORT && USER_B_RECEIVE_DECISION_ABORT)
    )

// 7. If any packet loss happens in PHASE 1 (prepare commit), 
// the decision result will eventually be "abort".

assert DECISION_EVENTUALLY_ABORT_WHEN_TIMEOUT_PHASE_ONE = (
    PACKET_LOST_PHASE_ONE 
    -> <>SERVER_ABORT
    )

// 8. The commit process will eventually finish even when 
// any packet loss happens in PHASE 1 (prepare commit).

assert COMMIT_PROCESS_EVENTUALLY_FINISH_WHEN_TIMEOUT_PHASE_ONE = (
    PACKET_LOST_PHASE_ONE 
    -> <>SERVER_COMMIT_FINISH
    )

// 9. The commit process will eventually finish even when 
// any packet loss happens in PHASE 2 (distribute decision).

assert COMMIT_PROCESS_EVENTUALLY_FINISH_WHEN_TIMEOUT_PHASE_TWO = (
    PACKET_LOST_PHASE_TWO
    -> <>SERVER_COMMIT_FINISH
    )

// 10. The commit process will eventually finish even when 
// any packet loss happens at any time.

assert COMMIT_PROCESS_EVENTUALLY_FINISH_WHEN_TIMEOUT_HAPPENS = (
    (PACKET_LOST_PHASE_ONE || PACKET_LOST_PHASE_TWO)
    ->  <>SERVER_COMMIT_FINISH
    )