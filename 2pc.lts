// Number of users
const UserNode = 2
range UserNodeID = 1 .. UserNode

// Status of users in server site 
const UserUnSent = 0
const UserUnRecv = 1
const UserRecv = 2
range UserStatus = UserUnSent .. UserRecv

// const DecisionYes = 0
// const DecisionNo = 1
// range Decisions = DecisionYes .. DecisionNo

//=============================
// SERVER PROCESS (COORDINATOR)
//=============================

// Server local process
// Starting by creating a new commit request
SERVER = SERVER_WORKING,
SERVER_WORKING = (
    create_commit_request -> GATHER_RESPONSE[UserUnSent][UserUnSent]
),

// Server local process with two params: a and b
// Both a and b are represented for user nodes
// This local process tracks message status sent to user nodes
GATHER_RESPONSE[a:UserStatus][b:UserStatus] = (
    // If not sent commit message to user a
    // Send commit message to user a
    when(a == UserUnSent)
        sent_commit_message_a -> GATHER_RESPONSE[UserUnRecv][b]
    |
    // If not sent commit message to user b
    // Send commit message to user b
    when(b == UserUnSent)
        sent_commit_message_b -> GATHER_RESPONSE[a][UserUnRecv]
    |
    // Wait for user a sent voting message to the server
    when(a == UserUnRecv)
        recv_voting_message_a -> GATHER_RESPONSE[UserRecv][b]
        //|
        //lost_a -> SERVER
    |
    // Wait for user b sent voting message to the server
    when(b == UserUnRecv)
        recv_voting_message_b -> GATHER_RESPONSE[a][UserRecv]
        //|
        //lost_b -> SERVER
    |
    // If both voting messages are received
    // Jump to the process that makes the final decision
    when(a == UserRecv && b == UserRecv)
        get_decision_result -> DECISION_PROCESS[a][b]
    
),

// A local process that makes the final decision
DECISION_PROCESS[a:UserStatus][b:UserStatus] = (
    back -> SERVER
).

//=============================
// NETWORK PROCESS 
//=============================

// Packet status in network process 
const PktEmpty = 0
const PktFromServer = 1
const PktFromUser = 2
const PktLost = 3
range PktStatus = PktEmpty .. PktLost

// A local process in network
// Handle with concurrent message delivery 
NETWORK = NETWORK_WORKING[PktEmpty][PktEmpty],
NETWORK_WORKING[a:PktStatus][b:PktStatus] = (
    // When neither server nor user a send message to each other
    when(a == PktEmpty)
        // Server send commit message to user a
        get_commit_message_a -> NETWORK_WORKING[PktFromServer][b]
        |
        // User a send voting message to server
        get_voting_message_a -> NETWORK_WORKING[PktFromUser][b]
    |
    // When neither server nor user b send message to each other
    when(b == PktEmpty)
        // Server send commit message to user b
        get_commit_message_b -> NETWORK_WORKING[a][PktFromServer]
        |
        // User b send voting message to server
        get_voting_message_b -> NETWORK_WORKING[a][PktFromUser]
    |
    // When server send a commit message to user a
    when(a == PktFromServer)
        put_commit_message_a -> NETWORK_WORKING[PktEmpty][b]
    |
    // When server send a commit message to user b
    when(b == PktFromServer)
        put_commit_message_b -> NETWORK_WORKING[a][PktEmpty]
    |
    // When user a send voting message to server
    when(a == PktFromUser)
        put_voting_message_a -> NETWORK_WORKING[PktEmpty][b]
    |
    // When user b send voting message to server
    when(b == PktFromUser)
        put_voting_message_b -> NETWORK_WORKING[a][PktEmpty]
).

//=============================
// USER PROCESS
//=============================

// User A process 
USER_A = (
    // Receive commit message from server
    // Response by voting message
    recv_commit_message_a -> vote_a -> send_voting_message_a -> USER_A
    ).

USER_B = (
    // Receive commit message from server
    // Response by voting message
    recv_commit_message_b -> vote_b -> send_voting_message_b -> USER_B
    ).

||TPC = (SERVER||NETWORK||USER_A||USER_B)
/
{sent_commit_message_a/get_commit_message_a, 
sent_commit_message_b/get_commit_message_b, 
recv_voting_message_a/put_voting_message_a, 
recv_voting_message_b/put_voting_message_b, 
recv_commit_message_a/put_commit_message_a, 
recv_commit_message_b/put_commit_message_b, 
send_voting_message_a/get_voting_message_a, 
send_voting_message_b/get_voting_message_b}.
